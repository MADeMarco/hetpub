{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a9f54150",
   "metadata": {},
   "outputs": [],
   "source": [
    "import stim\n",
    "import sinter\n",
    "import scienceplots\n",
    "import copy\n",
    "from surface_code_sim import LogicalQubit\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.ticker as mticker\n",
    "from matplotlib.ticker import FuncFormatter, MaxNLocator\n",
    "import matplotlib as mpl\n",
    "import os\n",
    "from datetime import datetime\n",
    "from matplotlib.colors import LinearSegmentedColormap\n",
    "\n",
    "def simulate_sc(param_sets):\n",
    "    task_list = []\n",
    "    for params in param_sets:\n",
    "        d = params['d']\n",
    "\n",
    "        num_cycles = 2*d\n",
    "\n",
    "        LQ = LogicalQubit(d, params)\n",
    "        circ = LQ.generate_stim(rounds=num_cycles)\n",
    "        dem = circ.detector_error_model(\n",
    "            approximate_disjoint_errors=True,\n",
    "            decompose_errors=True,\n",
    "            ignore_decomposition_failures=True\n",
    "        )\n",
    "\n",
    "        task_list.append(sinter.Task(\n",
    "            circuit=circ,\n",
    "            detector_error_model=dem,\n",
    "            json_metadata=params)\n",
    "        )\n",
    "\n",
    "    samples = sinter.collect(\n",
    "        num_workers=8,\n",
    "        max_shots=1_000_000,\n",
    "        max_errors=1000,\n",
    "        tasks=task_list,\n",
    "        decoders=['pymatching'],\n",
    "    )\n",
    "\n",
    "    sample_data = [{'error_prob': (float(sample.errors) / float(sample.shots)), 'num_cycles': num_cycles, **(sample.json_metadata)} for sample in\n",
    "                   samples]\n",
    "\n",
    "    return (sample_data)\n",
    "def ancilla_vs_data(base_params, T_ratio_values, d):\n",
    "\n",
    "    data_param_set = []\n",
    "    anci_param_set = []\n",
    "    for T_ratio in T_ratio_values:\n",
    "        params = copy.deepcopy(base_params)\n",
    "        params['data_T1'] = T_ratio * params['data_T1']\n",
    "        params['data_T2'] = T_ratio * params['data_T2']\n",
    "        params['d'] = d\n",
    "        params['T_ratio'] = T_ratio\n",
    "        data_param_set.append(params)\n",
    "\n",
    "        params = copy.deepcopy(base_params)\n",
    "        params['ancilla_T1'] = T_ratio * params['ancilla_T1']\n",
    "        params['ancilla_T2'] = T_ratio * params['ancilla_T2']\n",
    "        params['d'] = d\n",
    "        params['T_ratio'] = T_ratio\n",
    "        anci_param_set.append(params)\n",
    "\n",
    "    sample_data = simulate_sc(data_param_set)\n",
    "    sample_ancilla = simulate_sc(anci_param_set)\n",
    "\n",
    "    # get error rates:\n",
    "    data_error = [x['error_prob']/x['num_cycles'] for x in sample_data]\n",
    "    ancilla_error = [x['error_prob']/x['num_cycles'] for x in sample_ancilla]\n",
    "\n",
    "    # Plotting:\n",
    "    with plt.style.context(['science', 'no-latex']):\n",
    "        fig, ax = plt.subplots(figsize=(8, 5))\n",
    "        fig_options(fig, ax)\n",
    "        pparam = dict(xlabel='$T^*$ $(\\mu s)$', ylabel='$Logical\\ Error\\ Rate$')\n",
    "        ax.set(**pparam)\n",
    "        ax.set_ylim(0, 1.2 * max(data_error))\n",
    "        ax.set_xlim(0, max(100*T_ratio_values))\n",
    "        ax.scatter(100*T_ratio_values, data_error, s=10, label='$T_{CD} =T^*$, $T_{CA} = 100\\mu s$', color='#2F5080')\n",
    "        ax.scatter(100*T_ratio_values, ancilla_error, s=10, label='$T_{CD} = 100\\mu s$, $T_{CA} = T^*$', color='#1B7A74')\n",
    "        ax.plot([100, 100], [0,  max(data_error[0], ancilla_error[0])], color='#000000', linestyle='--', marker = 'none', linewidth=1)\n",
    "        ax.annotate('Homogeneous', xy=(100, data_error[0]), xytext=(150, data_error[0] + 0.0001),\n",
    "                    arrowprops=dict(facecolor='black', arrowstyle='->'),\n",
    "                    fontsize=12)\n",
    "        ax.legend(title='', frameon=True)\n",
    "        plt.show()\n",
    "        save_plot_with_timestamp(fig, 'ancilla_vs_data')\n",
    "\n",
    "def generate_colors(N, color1, color2):\n",
    "    \"\"\"\n",
    "    Generate N colors interpolating between color1 and color2.\n",
    "\n",
    "    Args:\n",
    "    N (int): Number of colors to generate.\n",
    "    color1 (str): Starting color in hex format.\n",
    "    color2 (str): Ending color in hex format.\n",
    "\n",
    "    Returns:\n",
    "    list: List of N colors in hex format.\n",
    "    \"\"\"\n",
    "    # Create a colormap that interpolates between color1 and color2\n",
    "    custom_cmap = LinearSegmentedColormap.from_list(\"custom_cmap\", [color1, color2])\n",
    "\n",
    "    # Generate N colors from the colormap\n",
    "    colors = custom_cmap(np.linspace(0, 1, N))\n",
    "\n",
    "    # Convert the colors to hex format\n",
    "    hex_colors = [mpl.colors.rgb2hex(color) for color in colors]\n",
    "\n",
    "    return hex_colors\n",
    "def plot_error_ratio(base_params, min_d, max_d, gate2_Time_values, T_ratio_values):\n",
    "\n",
    "    color_array = generate_colors(len(T_ratio_values), '#1B7A74', '#2F5080')\n",
    "\n",
    "    param_set = []\n",
    "    for T_ratio in T_ratio_values:\n",
    "        for gate2_Time in gate2_Time_values:\n",
    "            for d in [min_d, max_d]:\n",
    "                params = copy.deepcopy(base_params)\n",
    "                params['data_T1'] = T_ratio * params['data_T1']\n",
    "                params['data_T2'] = T_ratio * params['data_T2']\n",
    "                params['d'] = d\n",
    "                params['time_2q'] = gate2_Time\n",
    "                params['T_ratio'] = T_ratio\n",
    "                param_set.append(params)\n",
    "\n",
    "    sample_data = simulate_sc(param_set)\n",
    "\n",
    "    with plt.style.context(['science', 'no-latex']):\n",
    "        for i_T, T_ratio in enumerate(T_ratio_values):\n",
    "            error_ratio = []\n",
    "            for gate2_Time in gate2_Time_values:\n",
    "                select_data = [x for x in sample_data if x['T_ratio'] == T_ratio and x['time_2q'] == gate2_Time]\n",
    "                data_error = [x['error_prob'] for x in select_data]\n",
    "                error_ratio.append(data_error[-1] / data_error[0])\n",
    "            if i_T == 0:\n",
    "                fig, ax = plt.subplots(figsize=(8, 5))\n",
    "                fig_options(fig, ax)\n",
    "                pparam = dict(xlabel='$Gate\\ Time\\ (\\mu s)$', ylabel='$Error\\ Ratio$')\n",
    "                ax.set(**pparam)\n",
    "#                 ax.set_xlim(min(gate2_Time_values), max(gate2_Time_values))\n",
    "                ax.set_xlim(0, max(gate2_Time_values))\n",
    "\n",
    "            ax.plot(gate2_Time_values, error_ratio, label=f'$T_{{CD}} = {T_ratio*100}\\mu s$', color = color_array[i_T])\n",
    "        ax.plot(gate2_Time_values, [1] * len(gate2_Time_values), color='black', linestyle='--', marker='none')\n",
    "        ax.legend(frameon=True)\n",
    "        plt.show()\n",
    "        filename = 'error_ratio'\n",
    "        save_plot_with_timestamp(fig, filename)\n",
    "\n",
    "def is_decreasing(data):\n",
    "    if len(data) < 3:\n",
    "        raise ValueError(\"Data should contain at least 3 elements.\")\n",
    "\n",
    "    middle_index = len(data) // 2\n",
    "    first_element = data[0]\n",
    "    middle_element = data[middle_index]\n",
    "    last_element = data[-1]\n",
    "\n",
    "    return first_element > middle_element > last_element\n",
    "\n",
    "def save_plot_with_timestamp(fig, filename):\n",
    "    timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')\n",
    "    pdf_filename = f\"Figure_Saves/{filename}_{timestamp}.pdf\"\n",
    "    fig.savefig(pdf_filename)\n",
    "    print(f\"Plot saved as {pdf_filename}\")\n",
    "\n",
    "def fig_options(fig, ax):\n",
    "    mpl.rcParams['axes.labelsize'] = 16\n",
    "    mpl.rcParams['xtick.labelsize'] = 14\n",
    "    mpl.rcParams['ytick.labelsize'] = 14\n",
    "\n",
    "    ax.yaxis.grid(visible=True, which='minor', color='0.775', linestyle='-')\n",
    "    ax.xaxis.grid(visible=True, which='major', color='0.775', linestyle='-')\n",
    "    ax.xaxis.grid(visible=True, which='minor', color='0.875', linestyle='-')\n",
    "\n",
    "    marker_cycle = plt.cycler(marker=['o', 's', '^', 'v', '*', 'D', 'X', 'P'])\n",
    "    color_cycle = plt.cycler(color=['red', 'blue', 'green', 'orange', 'purple', 'cyan', 'magenta', 'yellow'])\n",
    "    combined_cycle = marker_cycle + color_cycle\n",
    "\n",
    "    # Apply the marker and color cycle to the axes\n",
    "    plt.gca().set_prop_cycle(combined_cycle)\n",
    "\n",
    "    fig.tight_layout()\n",
    "    plt.subplots_adjust(left=0.1, right=.95, bottom=0.1, top=.95)\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "21c6cd44",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Unrecognized marker style 'none'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "File \u001b[1;32m~\\Anaconda3\\envs\\pygsti-pycharm\\lib\\site-packages\\matplotlib\\markers.py:326\u001b[0m, in \u001b[0;36mMarkerStyle._set_marker\u001b[1;34m(self, marker)\u001b[0m\n\u001b[0;32m    325\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 326\u001b[0m     \u001b[43mPath\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmarker\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    327\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_marker_function \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_set_vertices\n",
      "File \u001b[1;32m~\\Anaconda3\\envs\\pygsti-pycharm\\lib\\site-packages\\matplotlib\\path.py:129\u001b[0m, in \u001b[0;36mPath.__init__\u001b[1;34m(self, vertices, codes, _interpolation_steps, closed, readonly)\u001b[0m\n\u001b[0;32m    101\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m    102\u001b[0m \u001b[38;5;124;03mCreate a new path with the given vertices and codes.\u001b[39;00m\n\u001b[0;32m    103\u001b[0m \n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    127\u001b[0m \u001b[38;5;124;03m    and codes as read-only arrays.\u001b[39;00m\n\u001b[0;32m    128\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m--> 129\u001b[0m vertices \u001b[38;5;241m=\u001b[39m \u001b[43m_to_unmasked_float_array\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvertices\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    130\u001b[0m _api\u001b[38;5;241m.\u001b[39mcheck_shape((\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m2\u001b[39m), vertices\u001b[38;5;241m=\u001b[39mvertices)\n",
      "File \u001b[1;32m~\\Anaconda3\\envs\\pygsti-pycharm\\lib\\site-packages\\matplotlib\\cbook\\__init__.py:1298\u001b[0m, in \u001b[0;36m_to_unmasked_float_array\u001b[1;34m(x)\u001b[0m\n\u001b[0;32m   1297\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m-> 1298\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mnp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43masarray\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mfloat\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "\u001b[1;31mValueError\u001b[0m: could not convert string to float: 'none'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Input \u001b[1;32mIn [2]\u001b[0m, in \u001b[0;36m<cell line: 18>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m base_params \u001b[38;5;241m=\u001b[39m {  \u001b[38;5;66;03m# units are microseconds\u001b[39;00m\n\u001b[0;32m      2\u001b[0m         \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdata_T1\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;241m100.0\u001b[39m,\n\u001b[0;32m      3\u001b[0m         \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdata_T2\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;241m100.0\u001b[39m,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m     13\u001b[0m         \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mreset_err\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;241m0.001\u001b[39m\n\u001b[0;32m     14\u001b[0m     }\n\u001b[0;32m     16\u001b[0m T_ratio_values_fine \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mlinspace(\u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m10\u001b[39m, \u001b[38;5;241m100\u001b[39m)\n\u001b[1;32m---> 18\u001b[0m \u001b[43mancilla_vs_data\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbase_params\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbase_params\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mT_ratio_values\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mT_ratio_values_fine\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43md\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m9\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "Input \u001b[1;32mIn [1]\u001b[0m, in \u001b[0;36mancilla_vs_data\u001b[1;34m(base_params, T_ratio_values, d)\u001b[0m\n\u001b[0;32m     82\u001b[0m ax\u001b[38;5;241m.\u001b[39mscatter(\u001b[38;5;241m100\u001b[39m\u001b[38;5;241m*\u001b[39mT_ratio_values, data_error, s\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m, label\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m$T_\u001b[39m\u001b[38;5;132;01m{CD}\u001b[39;00m\u001b[38;5;124m =T^*$, $T_\u001b[39m\u001b[38;5;132;01m{CA}\u001b[39;00m\u001b[38;5;124m = 100\u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124mmu s$\u001b[39m\u001b[38;5;124m'\u001b[39m, color\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m#2F5080\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m     83\u001b[0m ax\u001b[38;5;241m.\u001b[39mscatter(\u001b[38;5;241m100\u001b[39m\u001b[38;5;241m*\u001b[39mT_ratio_values, ancilla_error, s\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m, label\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m$T_\u001b[39m\u001b[38;5;132;01m{CD}\u001b[39;00m\u001b[38;5;124m = 100\u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124mmu s$, $T_\u001b[39m\u001b[38;5;132;01m{CA}\u001b[39;00m\u001b[38;5;124m = T^*$\u001b[39m\u001b[38;5;124m'\u001b[39m, color\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m#1B7A74\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m---> 84\u001b[0m \u001b[43max\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mplot\u001b[49m\u001b[43m(\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m100\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m100\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;28;43mmax\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mdata_error\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mancilla_error\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolor\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m#000000\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlinestyle\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m--\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmarker\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mnone\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlinewidth\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[0;32m     85\u001b[0m ax\u001b[38;5;241m.\u001b[39mannotate(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHomogeneous\u001b[39m\u001b[38;5;124m'\u001b[39m, xy\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m100\u001b[39m, data_error[\u001b[38;5;241m0\u001b[39m]), xytext\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m150\u001b[39m, data_error[\u001b[38;5;241m0\u001b[39m] \u001b[38;5;241m+\u001b[39m \u001b[38;5;241m0.0001\u001b[39m),\n\u001b[0;32m     86\u001b[0m             arrowprops\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mdict\u001b[39m(facecolor\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mblack\u001b[39m\u001b[38;5;124m'\u001b[39m, arrowstyle\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m->\u001b[39m\u001b[38;5;124m'\u001b[39m),\n\u001b[0;32m     87\u001b[0m             fontsize\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m12\u001b[39m)\n\u001b[0;32m     88\u001b[0m ax\u001b[38;5;241m.\u001b[39mlegend(title\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m'\u001b[39m, frameon\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n",
      "File \u001b[1;32m~\\Anaconda3\\envs\\pygsti-pycharm\\lib\\site-packages\\matplotlib\\axes\\_axes.py:1632\u001b[0m, in \u001b[0;36mAxes.plot\u001b[1;34m(self, scalex, scaley, data, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1390\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m   1391\u001b[0m \u001b[38;5;124;03mPlot y versus x as lines and/or markers.\u001b[39;00m\n\u001b[0;32m   1392\u001b[0m \n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   1629\u001b[0m \u001b[38;5;124;03m(``'green'``) or hex strings (``'#008000'``).\u001b[39;00m\n\u001b[0;32m   1630\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m   1631\u001b[0m kwargs \u001b[38;5;241m=\u001b[39m cbook\u001b[38;5;241m.\u001b[39mnormalize_kwargs(kwargs, mlines\u001b[38;5;241m.\u001b[39mLine2D)\n\u001b[1;32m-> 1632\u001b[0m lines \u001b[38;5;241m=\u001b[39m [\u001b[38;5;241m*\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_lines(\u001b[38;5;241m*\u001b[39margs, data\u001b[38;5;241m=\u001b[39mdata, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)]\n\u001b[0;32m   1633\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m line \u001b[38;5;129;01min\u001b[39;00m lines:\n\u001b[0;32m   1634\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39madd_line(line)\n",
      "File \u001b[1;32m~\\Anaconda3\\envs\\pygsti-pycharm\\lib\\site-packages\\matplotlib\\axes\\_base.py:312\u001b[0m, in \u001b[0;36m_process_plot_var_args.__call__\u001b[1;34m(self, data, *args, **kwargs)\u001b[0m\n\u001b[0;32m    310\u001b[0m     this \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m args[\u001b[38;5;241m0\u001b[39m],\n\u001b[0;32m    311\u001b[0m     args \u001b[38;5;241m=\u001b[39m args[\u001b[38;5;241m1\u001b[39m:]\n\u001b[1;32m--> 312\u001b[0m \u001b[38;5;28;01myield from\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_plot_args\u001b[49m\u001b[43m(\u001b[49m\u001b[43mthis\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32m~\\Anaconda3\\envs\\pygsti-pycharm\\lib\\site-packages\\matplotlib\\axes\\_base.py:538\u001b[0m, in \u001b[0;36m_process_plot_var_args._plot_args\u001b[1;34m(self, tup, kwargs, return_kwargs)\u001b[0m\n\u001b[0;32m    536\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mlist\u001b[39m(result)\n\u001b[0;32m    537\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 538\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m [l[\u001b[38;5;241m0\u001b[39m] \u001b[38;5;28;01mfor\u001b[39;00m l \u001b[38;5;129;01min\u001b[39;00m result]\n",
      "File \u001b[1;32m~\\Anaconda3\\envs\\pygsti-pycharm\\lib\\site-packages\\matplotlib\\axes\\_base.py:538\u001b[0m, in \u001b[0;36m<listcomp>\u001b[1;34m(.0)\u001b[0m\n\u001b[0;32m    536\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mlist\u001b[39m(result)\n\u001b[0;32m    537\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 538\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m [l[\u001b[38;5;241m0\u001b[39m] \u001b[38;5;28;01mfor\u001b[39;00m l \u001b[38;5;129;01min\u001b[39;00m result]\n",
      "File \u001b[1;32m~\\Anaconda3\\envs\\pygsti-pycharm\\lib\\site-packages\\matplotlib\\axes\\_base.py:531\u001b[0m, in \u001b[0;36m<genexpr>\u001b[1;34m(.0)\u001b[0m\n\u001b[0;32m    528\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    529\u001b[0m     labels \u001b[38;5;241m=\u001b[39m [label] \u001b[38;5;241m*\u001b[39m n_datasets\n\u001b[1;32m--> 531\u001b[0m result \u001b[38;5;241m=\u001b[39m (\u001b[43mmake_artist\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m[\u001b[49m\u001b[43m:\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mj\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m%\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mncx\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m[\u001b[49m\u001b[43m:\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mj\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m%\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mncy\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkw\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    532\u001b[0m \u001b[43m                      \u001b[49m\u001b[43m{\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mlabel\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mlabel\u001b[49m\u001b[43m}\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    533\u001b[0m           \u001b[38;5;28;01mfor\u001b[39;00m j, label \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(labels))\n\u001b[0;32m    535\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m return_kwargs:\n\u001b[0;32m    536\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mlist\u001b[39m(result)\n",
      "File \u001b[1;32m~\\Anaconda3\\envs\\pygsti-pycharm\\lib\\site-packages\\matplotlib\\axes\\_base.py:351\u001b[0m, in \u001b[0;36m_process_plot_var_args._makeline\u001b[1;34m(self, x, y, kw, kwargs)\u001b[0m\n\u001b[0;32m    349\u001b[0m default_dict \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getdefaults(\u001b[38;5;28mset\u001b[39m(), kw)\n\u001b[0;32m    350\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_setdefaults(default_dict, kw)\n\u001b[1;32m--> 351\u001b[0m seg \u001b[38;5;241m=\u001b[39m mlines\u001b[38;5;241m.\u001b[39mLine2D(x, y, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkw)\n\u001b[0;32m    352\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m seg, kw\n",
      "File \u001b[1;32m~\\Anaconda3\\envs\\pygsti-pycharm\\lib\\site-packages\\matplotlib\\lines.py:371\u001b[0m, in \u001b[0;36mLine2D.__init__\u001b[1;34m(self, xdata, ydata, linewidth, linestyle, color, marker, markersize, markeredgewidth, markeredgecolor, markerfacecolor, markerfacecoloralt, fillstyle, antialiased, dash_capstyle, solid_capstyle, dash_joinstyle, solid_joinstyle, pickradius, drawstyle, markevery, **kwargs)\u001b[0m\n\u001b[0;32m    369\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_color \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m    370\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mset_color(color)\n\u001b[1;32m--> 371\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_marker \u001b[38;5;241m=\u001b[39m \u001b[43mMarkerStyle\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmarker\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfillstyle\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    373\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_markevery \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m    374\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_markersize \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[1;32m~\\Anaconda3\\envs\\pygsti-pycharm\\lib\\site-packages\\matplotlib\\markers.py:235\u001b[0m, in \u001b[0;36mMarkerStyle.__init__\u001b[1;34m(self, marker, fillstyle)\u001b[0m\n\u001b[0;32m    233\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_marker_function \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m    234\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_set_fillstyle(fillstyle)\n\u001b[1;32m--> 235\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_set_marker\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmarker\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32m~\\Anaconda3\\envs\\pygsti-pycharm\\lib\\site-packages\\matplotlib\\markers.py:329\u001b[0m, in \u001b[0;36mMarkerStyle._set_marker\u001b[1;34m(self, marker)\u001b[0m\n\u001b[0;32m    327\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_marker_function \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_set_vertices\n\u001b[0;32m    328\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m--> 329\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mUnrecognized marker style \u001b[39m\u001b[38;5;132;01m{!r}\u001b[39;00m\u001b[38;5;124m'\u001b[39m\n\u001b[0;32m    330\u001b[0m                          \u001b[38;5;241m.\u001b[39mformat(marker)) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[0;32m    332\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(marker, MarkerStyle):\n\u001b[0;32m    333\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_marker \u001b[38;5;241m=\u001b[39m marker\n",
      "\u001b[1;31mValueError\u001b[0m: Unrecognized marker style 'none'"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "    base_params = {  # units are microseconds\n",
    "            'data_T1': 100.0,\n",
    "            'data_T2': 100.0,\n",
    "            'ancilla_T1': 100.0,\n",
    "            'ancilla_T2': 100.0,\n",
    "            'time_1q_ancilla': 0.1,\n",
    "            'time_2q': 0.1,\n",
    "            'time_measurement_ancilla': 0.5,\n",
    "            'time_reset_ancilla': 0.5,\n",
    "            'gate2_err': 0,\n",
    "            'ancilla_1q_err': 0,\n",
    "            'readout_err': 0.01,\n",
    "            'reset_err': 0.001\n",
    "        }\n",
    "\n",
    "    T_ratio_values_fine = np.linspace(1, 10, 100)\n",
    "\n",
    "    ancilla_vs_data(base_params=base_params, T_ratio_values=T_ratio_values_fine, d=9)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d69a79e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "    base_params = {  # units are microseconds\n",
    "            'data_T1': 500.0,\n",
    "            'data_T2': 500.0,\n",
    "            'ancilla_T1': 500.0,\n",
    "            'ancilla_T2': 500.0,\n",
    "            'time_1q_ancilla': 0.1,\n",
    "            'time_2q': 0.1,\n",
    "            'time_measurement_ancilla': 0.5,\n",
    "            'time_reset_ancilla': 0.5,\n",
    "            'gate2_err': 0,\n",
    "            'ancilla_1q_err': 0,\n",
    "            'readout_err': 0.01,\n",
    "            'reset_err': 0.001\n",
    "        }\n",
    "\n",
    "    T_ratio_values_fine = np.linspace(1, 10, 100)\n",
    "\n",
    "    ancilla_vs_data(base_params=base_params, T_ratio_values=T_ratio_values_fine, d=9)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33d84584",
   "metadata": {},
   "outputs": [],
   "source": [
    "    base_params = {  # units are microseconds\n",
    "            'data_T1': 100.0,\n",
    "            'data_T2': 100.0,\n",
    "            'ancilla_T1': 100.0,\n",
    "            'ancilla_T2': 100.0,\n",
    "            'time_1q_ancilla': 0.04,\n",
    "            'time_2q': 0.04,\n",
    "            'time_measurement_ancilla': 0.5,\n",
    "            'gate2_err': 0.01,\n",
    "            'time_reset_ancilla': 0.5,\n",
    "            'ancilla_1q_err': 1e-3,\n",
    "            'readout_err': 0.01,\n",
    "            'reset_err': 0.001\n",
    "        }\n",
    "\n",
    "    T_ratio_coarse = [1, 2, 3, 4, 5, 6]\n",
    "    gate2_Time_values = np.linspace(0.1, 5, 10)\n",
    "\n",
    "plot_error_ratio(base_params=base_params, min_d=3, max_d=9, gate2_Time_values=gate2_Time_values, T_ratio_values=T_ratio_coarse)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
